/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type CompositeSloApi interface {

	/*
		CreateCompositeSlo Creates a Composite SLO

		You must have `all` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@return ApiCreateCompositeSloRequest
	*/
	CreateCompositeSlo(ctx context.Context, spaceId string) ApiCreateCompositeSloRequest

	// CreateCompositeSloExecute executes the request
	//  @return CreateCompositeSloResponse
	CreateCompositeSloExecute(r ApiCreateCompositeSloRequest) (*CreateCompositeSloResponse, *http.Response, error)

	/*
		DeleteCompositeSlo Deletes a composite SLO

		You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@param compositeSloId An identifier for the composite slo.
		@return ApiDeleteCompositeSloRequest
	*/
	DeleteCompositeSlo(ctx context.Context, spaceId string, compositeSloId string) ApiDeleteCompositeSloRequest

	// DeleteCompositeSloExecute executes the request
	DeleteCompositeSloExecute(r ApiDeleteCompositeSloRequest) (*http.Response, error)

	/*
		FindCompositeSlo Retrieves a paginated list of composite SLOs with summary

		You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@return ApiFindCompositeSloRequest
	*/
	FindCompositeSlo(ctx context.Context, spaceId string) ApiFindCompositeSloRequest

	// FindCompositeSloExecute executes the request
	//  @return FindCompositeSloResponse
	FindCompositeSloExecute(r ApiFindCompositeSloRequest) (*FindCompositeSloResponse, *http.Response, error)

	/*
		GetCompositeSlo Retrieves a composite SLO

		You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@param compositeSloId An identifier for the composite slo.
		@return ApiGetCompositeSloRequest
	*/
	GetCompositeSlo(ctx context.Context, spaceId string, compositeSloId string) ApiGetCompositeSloRequest

	// GetCompositeSloExecute executes the request
	//  @return CompositeSloResponse
	GetCompositeSloExecute(r ApiGetCompositeSloRequest) (*CompositeSloResponse, *http.Response, error)

	/*
		UpdateCompositeSlo Updates a composite SLO

		You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@param compositeSloId An identifier for the composite slo.
		@return ApiUpdateCompositeSloRequest
	*/
	UpdateCompositeSlo(ctx context.Context, spaceId string, compositeSloId string) ApiUpdateCompositeSloRequest

	// UpdateCompositeSloExecute executes the request
	//  @return BaseCompositeSloResponse
	UpdateCompositeSloExecute(r ApiUpdateCompositeSloRequest) (*BaseCompositeSloResponse, *http.Response, error)
}

// CompositeSloApiService CompositeSloApi service
type CompositeSloApiService service

type ApiCreateCompositeSloRequest struct {
	ctx                       context.Context
	ApiService                CompositeSloApi
	kbnXsrf                   *string
	spaceId                   string
	createCompositeSloRequest *CreateCompositeSloRequest
}

// Cross-site request forgery protection
func (r ApiCreateCompositeSloRequest) KbnXsrf(kbnXsrf string) ApiCreateCompositeSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiCreateCompositeSloRequest) CreateCompositeSloRequest(createCompositeSloRequest CreateCompositeSloRequest) ApiCreateCompositeSloRequest {
	r.createCompositeSloRequest = &createCompositeSloRequest
	return r
}

func (r ApiCreateCompositeSloRequest) Execute() (*CreateCompositeSloResponse, *http.Response, error) {
	return r.ApiService.CreateCompositeSloExecute(r)
}

/*
CreateCompositeSlo Creates a Composite SLO

You must have `all` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@return ApiCreateCompositeSloRequest
*/
func (a *CompositeSloApiService) CreateCompositeSlo(ctx context.Context, spaceId string) ApiCreateCompositeSloRequest {
	return ApiCreateCompositeSloRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return CreateCompositeSloResponse
func (a *CompositeSloApiService) CreateCompositeSloExecute(r ApiCreateCompositeSloRequest) (*CreateCompositeSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCompositeSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloApiService.CreateCompositeSlo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.createCompositeSloRequest == nil {
		return localVarReturnValue, nil, reportError("createCompositeSloRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	// body params
	localVarPostBody = r.createCompositeSloRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCompositeSloRequest struct {
	ctx            context.Context
	ApiService     CompositeSloApi
	kbnXsrf        *string
	spaceId        string
	compositeSloId string
}

// Cross-site request forgery protection
func (r ApiDeleteCompositeSloRequest) KbnXsrf(kbnXsrf string) ApiDeleteCompositeSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiDeleteCompositeSloRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompositeSloExecute(r)
}

/*
DeleteCompositeSlo Deletes a composite SLO

You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param compositeSloId An identifier for the composite slo.
	@return ApiDeleteCompositeSloRequest
*/
func (a *CompositeSloApiService) DeleteCompositeSlo(ctx context.Context, spaceId string, compositeSloId string) ApiDeleteCompositeSloRequest {
	return ApiDeleteCompositeSloRequest{
		ApiService:     a,
		ctx:            ctx,
		spaceId:        spaceId,
		compositeSloId: compositeSloId,
	}
}

// Execute executes the request
func (a *CompositeSloApiService) DeleteCompositeSloExecute(r ApiDeleteCompositeSloRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloApiService.DeleteCompositeSlo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos/{compositeSloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"compositeSloId"+"}", url.PathEscape(parameterValueToString(r.compositeSloId, "compositeSloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFindCompositeSloRequest struct {
	ctx           context.Context
	ApiService    CompositeSloApi
	kbnXsrf       *string
	spaceId       string
	page          *int32
	perPage       *int32
	sortBy        *string
	sortDirection *string
}

// Cross-site request forgery protection
func (r ApiFindCompositeSloRequest) KbnXsrf(kbnXsrf string) ApiFindCompositeSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

// The page number to return
func (r ApiFindCompositeSloRequest) Page(page int32) ApiFindCompositeSloRequest {
	r.page = &page
	return r
}

// The number of SLOs to return per page
func (r ApiFindCompositeSloRequest) PerPage(perPage int32) ApiFindCompositeSloRequest {
	r.perPage = &perPage
	return r
}

// Sort by field
func (r ApiFindCompositeSloRequest) SortBy(sortBy string) ApiFindCompositeSloRequest {
	r.sortBy = &sortBy
	return r
}

// Sort order
func (r ApiFindCompositeSloRequest) SortDirection(sortDirection string) ApiFindCompositeSloRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFindCompositeSloRequest) Execute() (*FindCompositeSloResponse, *http.Response, error) {
	return r.ApiService.FindCompositeSloExecute(r)
}

/*
FindCompositeSlo Retrieves a paginated list of composite SLOs with summary

You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@return ApiFindCompositeSloRequest
*/
func (a *CompositeSloApiService) FindCompositeSlo(ctx context.Context, spaceId string) ApiFindCompositeSloRequest {
	return ApiFindCompositeSloRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return FindCompositeSloResponse
func (a *CompositeSloApiService) FindCompositeSloExecute(r ApiFindCompositeSloRequest) (*FindCompositeSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FindCompositeSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloApiService.FindCompositeSlo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "perPage", r.perPage, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompositeSloRequest struct {
	ctx            context.Context
	ApiService     CompositeSloApi
	kbnXsrf        *string
	spaceId        string
	compositeSloId string
}

// Cross-site request forgery protection
func (r ApiGetCompositeSloRequest) KbnXsrf(kbnXsrf string) ApiGetCompositeSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiGetCompositeSloRequest) Execute() (*CompositeSloResponse, *http.Response, error) {
	return r.ApiService.GetCompositeSloExecute(r)
}

/*
GetCompositeSlo Retrieves a composite SLO

You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param compositeSloId An identifier for the composite slo.
	@return ApiGetCompositeSloRequest
*/
func (a *CompositeSloApiService) GetCompositeSlo(ctx context.Context, spaceId string, compositeSloId string) ApiGetCompositeSloRequest {
	return ApiGetCompositeSloRequest{
		ApiService:     a,
		ctx:            ctx,
		spaceId:        spaceId,
		compositeSloId: compositeSloId,
	}
}

// Execute executes the request
//
//	@return CompositeSloResponse
func (a *CompositeSloApiService) GetCompositeSloExecute(r ApiGetCompositeSloRequest) (*CompositeSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompositeSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloApiService.GetCompositeSlo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos/{compositeSloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"compositeSloId"+"}", url.PathEscape(parameterValueToString(r.compositeSloId, "compositeSloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCompositeSloRequest struct {
	ctx                       context.Context
	ApiService                CompositeSloApi
	kbnXsrf                   *string
	spaceId                   string
	compositeSloId            string
	updateCompositeSloRequest *UpdateCompositeSloRequest
}

// Cross-site request forgery protection
func (r ApiUpdateCompositeSloRequest) KbnXsrf(kbnXsrf string) ApiUpdateCompositeSloRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiUpdateCompositeSloRequest) UpdateCompositeSloRequest(updateCompositeSloRequest UpdateCompositeSloRequest) ApiUpdateCompositeSloRequest {
	r.updateCompositeSloRequest = &updateCompositeSloRequest
	return r
}

func (r ApiUpdateCompositeSloRequest) Execute() (*BaseCompositeSloResponse, *http.Response, error) {
	return r.ApiService.UpdateCompositeSloExecute(r)
}

/*
UpdateCompositeSlo Updates a composite SLO

You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param compositeSloId An identifier for the composite slo.
	@return ApiUpdateCompositeSloRequest
*/
func (a *CompositeSloApiService) UpdateCompositeSlo(ctx context.Context, spaceId string, compositeSloId string) ApiUpdateCompositeSloRequest {
	return ApiUpdateCompositeSloRequest{
		ApiService:     a,
		ctx:            ctx,
		spaceId:        spaceId,
		compositeSloId: compositeSloId,
	}
}

// Execute executes the request
//
//	@return BaseCompositeSloResponse
func (a *CompositeSloApiService) UpdateCompositeSloExecute(r ApiUpdateCompositeSloRequest) (*BaseCompositeSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BaseCompositeSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloApiService.UpdateCompositeSlo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos/{compositeSloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"compositeSloId"+"}", url.PathEscape(parameterValueToString(r.compositeSloId, "compositeSloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.updateCompositeSloRequest == nil {
		return localVarReturnValue, nil, reportError("updateCompositeSloRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	// body params
	localVarPostBody = r.updateCompositeSloRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model4xxResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
