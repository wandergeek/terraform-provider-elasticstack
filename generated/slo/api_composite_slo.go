/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type CompositeSloAPI interface {

	/*
		CreateCompositeSloOp Creates a Composite SLO

		You must have `all` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@return ApiCreateCompositeSloOpRequest
	*/
	CreateCompositeSloOp(ctx context.Context, spaceId string) ApiCreateCompositeSloOpRequest

	// CreateCompositeSloOpExecute executes the request
	//  @return CreateCompositeSloResponse
	CreateCompositeSloOpExecute(r ApiCreateCompositeSloOpRequest) (*CreateCompositeSloResponse, *http.Response, error)

	/*
		DeleteCompositeSloOp Deletes a composite SLO

		You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@param compositeSloId An identifier for the composite slo.
		@return ApiDeleteCompositeSloOpRequest
	*/
	DeleteCompositeSloOp(ctx context.Context, spaceId string, compositeSloId string) ApiDeleteCompositeSloOpRequest

	// DeleteCompositeSloOpExecute executes the request
	DeleteCompositeSloOpExecute(r ApiDeleteCompositeSloOpRequest) (*http.Response, error)

	/*
		FindCompositeSloOp Retrieves a paginated list of composite SLOs with summary

		You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@return ApiFindCompositeSloOpRequest
	*/
	FindCompositeSloOp(ctx context.Context, spaceId string) ApiFindCompositeSloOpRequest

	// FindCompositeSloOpExecute executes the request
	//  @return FindCompositeSloResponse
	FindCompositeSloOpExecute(r ApiFindCompositeSloOpRequest) (*FindCompositeSloResponse, *http.Response, error)

	/*
		GetCompositeSloOp Retrieves a composite SLO

		You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@param compositeSloId An identifier for the composite slo.
		@return ApiGetCompositeSloOpRequest
	*/
	GetCompositeSloOp(ctx context.Context, spaceId string, compositeSloId string) ApiGetCompositeSloOpRequest

	// GetCompositeSloOpExecute executes the request
	//  @return CompositeSloResponse
	GetCompositeSloOpExecute(r ApiGetCompositeSloOpRequest) (*CompositeSloResponse, *http.Response, error)

	/*
		UpdateCompositeSloOp Updates a composite SLO

		You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
		@param compositeSloId An identifier for the composite slo.
		@return ApiUpdateCompositeSloOpRequest
	*/
	UpdateCompositeSloOp(ctx context.Context, spaceId string, compositeSloId string) ApiUpdateCompositeSloOpRequest

	// UpdateCompositeSloOpExecute executes the request
	//  @return BaseCompositeSloResponse
	UpdateCompositeSloOpExecute(r ApiUpdateCompositeSloOpRequest) (*BaseCompositeSloResponse, *http.Response, error)
}

// CompositeSloAPIService CompositeSloAPI service
type CompositeSloAPIService service

type ApiCreateCompositeSloOpRequest struct {
	ctx                       context.Context
	ApiService                CompositeSloAPI
	kbnXsrf                   *string
	spaceId                   string
	createCompositeSloRequest *CreateCompositeSloRequest
}

// Cross-site request forgery protection
func (r ApiCreateCompositeSloOpRequest) KbnXsrf(kbnXsrf string) ApiCreateCompositeSloOpRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiCreateCompositeSloOpRequest) CreateCompositeSloRequest(createCompositeSloRequest CreateCompositeSloRequest) ApiCreateCompositeSloOpRequest {
	r.createCompositeSloRequest = &createCompositeSloRequest
	return r
}

func (r ApiCreateCompositeSloOpRequest) Execute() (*CreateCompositeSloResponse, *http.Response, error) {
	return r.ApiService.CreateCompositeSloOpExecute(r)
}

/*
CreateCompositeSloOp Creates a Composite SLO

You must have `all` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@return ApiCreateCompositeSloOpRequest
*/
func (a *CompositeSloAPIService) CreateCompositeSloOp(ctx context.Context, spaceId string) ApiCreateCompositeSloOpRequest {
	return ApiCreateCompositeSloOpRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return CreateCompositeSloResponse
func (a *CompositeSloAPIService) CreateCompositeSloOpExecute(r ApiCreateCompositeSloOpRequest) (*CreateCompositeSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateCompositeSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloAPIService.CreateCompositeSloOp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.createCompositeSloRequest == nil {
		return localVarReturnValue, nil, reportError("createCompositeSloRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	// body params
	localVarPostBody = r.createCompositeSloRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Model403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Model409Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCompositeSloOpRequest struct {
	ctx            context.Context
	ApiService     CompositeSloAPI
	kbnXsrf        *string
	spaceId        string
	compositeSloId string
}

// Cross-site request forgery protection
func (r ApiDeleteCompositeSloOpRequest) KbnXsrf(kbnXsrf string) ApiDeleteCompositeSloOpRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiDeleteCompositeSloOpRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompositeSloOpExecute(r)
}

/*
DeleteCompositeSloOp Deletes a composite SLO

You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param compositeSloId An identifier for the composite slo.
	@return ApiDeleteCompositeSloOpRequest
*/
func (a *CompositeSloAPIService) DeleteCompositeSloOp(ctx context.Context, spaceId string, compositeSloId string) ApiDeleteCompositeSloOpRequest {
	return ApiDeleteCompositeSloOpRequest{
		ApiService:     a,
		ctx:            ctx,
		spaceId:        spaceId,
		compositeSloId: compositeSloId,
	}
}

// Execute executes the request
func (a *CompositeSloAPIService) DeleteCompositeSloOpExecute(r ApiDeleteCompositeSloOpRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloAPIService.DeleteCompositeSloOp")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos/{compositeSloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"compositeSloId"+"}", url.PathEscape(parameterValueToString(r.compositeSloId, "compositeSloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Model403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Model404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFindCompositeSloOpRequest struct {
	ctx           context.Context
	ApiService    CompositeSloAPI
	kbnXsrf       *string
	spaceId       string
	page          *int32
	perPage       *int32
	sortBy        *string
	sortDirection *string
}

// Cross-site request forgery protection
func (r ApiFindCompositeSloOpRequest) KbnXsrf(kbnXsrf string) ApiFindCompositeSloOpRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

// The page number to return
func (r ApiFindCompositeSloOpRequest) Page(page int32) ApiFindCompositeSloOpRequest {
	r.page = &page
	return r
}

// The number of SLOs to return per page
func (r ApiFindCompositeSloOpRequest) PerPage(perPage int32) ApiFindCompositeSloOpRequest {
	r.perPage = &perPage
	return r
}

// Sort by field
func (r ApiFindCompositeSloOpRequest) SortBy(sortBy string) ApiFindCompositeSloOpRequest {
	r.sortBy = &sortBy
	return r
}

// Sort order
func (r ApiFindCompositeSloOpRequest) SortDirection(sortDirection string) ApiFindCompositeSloOpRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFindCompositeSloOpRequest) Execute() (*FindCompositeSloResponse, *http.Response, error) {
	return r.ApiService.FindCompositeSloOpExecute(r)
}

/*
FindCompositeSloOp Retrieves a paginated list of composite SLOs with summary

You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@return ApiFindCompositeSloOpRequest
*/
func (a *CompositeSloAPIService) FindCompositeSloOp(ctx context.Context, spaceId string) ApiFindCompositeSloOpRequest {
	return ApiFindCompositeSloOpRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return FindCompositeSloResponse
func (a *CompositeSloAPIService) FindCompositeSloOpExecute(r ApiFindCompositeSloOpRequest) (*FindCompositeSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FindCompositeSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloAPIService.FindCompositeSloOp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "perPage", r.perPage, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Model403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Model404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompositeSloOpRequest struct {
	ctx            context.Context
	ApiService     CompositeSloAPI
	kbnXsrf        *string
	spaceId        string
	compositeSloId string
}

// Cross-site request forgery protection
func (r ApiGetCompositeSloOpRequest) KbnXsrf(kbnXsrf string) ApiGetCompositeSloOpRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiGetCompositeSloOpRequest) Execute() (*CompositeSloResponse, *http.Response, error) {
	return r.ApiService.GetCompositeSloOpExecute(r)
}

/*
GetCompositeSloOp Retrieves a composite SLO

You must have the `read` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param compositeSloId An identifier for the composite slo.
	@return ApiGetCompositeSloOpRequest
*/
func (a *CompositeSloAPIService) GetCompositeSloOp(ctx context.Context, spaceId string, compositeSloId string) ApiGetCompositeSloOpRequest {
	return ApiGetCompositeSloOpRequest{
		ApiService:     a,
		ctx:            ctx,
		spaceId:        spaceId,
		compositeSloId: compositeSloId,
	}
}

// Execute executes the request
//
//	@return CompositeSloResponse
func (a *CompositeSloAPIService) GetCompositeSloOpExecute(r ApiGetCompositeSloOpRequest) (*CompositeSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompositeSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloAPIService.GetCompositeSloOp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos/{compositeSloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"compositeSloId"+"}", url.PathEscape(parameterValueToString(r.compositeSloId, "compositeSloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Model403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Model404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCompositeSloOpRequest struct {
	ctx                       context.Context
	ApiService                CompositeSloAPI
	kbnXsrf                   *string
	spaceId                   string
	compositeSloId            string
	updateCompositeSloRequest *UpdateCompositeSloRequest
}

// Cross-site request forgery protection
func (r ApiUpdateCompositeSloOpRequest) KbnXsrf(kbnXsrf string) ApiUpdateCompositeSloOpRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiUpdateCompositeSloOpRequest) UpdateCompositeSloRequest(updateCompositeSloRequest UpdateCompositeSloRequest) ApiUpdateCompositeSloOpRequest {
	r.updateCompositeSloRequest = &updateCompositeSloRequest
	return r
}

func (r ApiUpdateCompositeSloOpRequest) Execute() (*BaseCompositeSloResponse, *http.Response, error) {
	return r.ApiService.UpdateCompositeSloOpExecute(r)
}

/*
UpdateCompositeSloOp Updates a composite SLO

You must have the `write` privileges for the **SLOs** feature in the **Observability** section of the Kibana feature privileges.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.
	@param compositeSloId An identifier for the composite slo.
	@return ApiUpdateCompositeSloOpRequest
*/
func (a *CompositeSloAPIService) UpdateCompositeSloOp(ctx context.Context, spaceId string, compositeSloId string) ApiUpdateCompositeSloOpRequest {
	return ApiUpdateCompositeSloOpRequest{
		ApiService:     a,
		ctx:            ctx,
		spaceId:        spaceId,
		compositeSloId: compositeSloId,
	}
}

// Execute executes the request
//
//	@return BaseCompositeSloResponse
func (a *CompositeSloAPIService) UpdateCompositeSloOpExecute(r ApiUpdateCompositeSloOpRequest) (*BaseCompositeSloResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BaseCompositeSloResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompositeSloAPIService.UpdateCompositeSloOp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/observability/composite_slos/{compositeSloId}"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"compositeSloId"+"}", url.PathEscape(parameterValueToString(r.compositeSloId, "compositeSloId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.updateCompositeSloRequest == nil {
		return localVarReturnValue, nil, reportError("updateCompositeSloRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	// body params
	localVarPostBody = r.updateCompositeSloRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["ApiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model401Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Model403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Model404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
