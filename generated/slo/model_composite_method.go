/*
SLOs

OpenAPI schema for SLOs endpoints

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slo

import (
	"encoding/json"
	"fmt"
)

// CompositeMethod The composite method to use for the composite SLO.
type CompositeMethod string

// List of composite_method
const (
	WEIGHTED_AVERAGE CompositeMethod = "weightedAverage"
)

// All allowed values of CompositeMethod enum
var AllowedCompositeMethodEnumValues = []CompositeMethod{
	"weightedAverage",
}

func (v *CompositeMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompositeMethod(value)
	for _, existing := range AllowedCompositeMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompositeMethod", value)
}

// NewCompositeMethodFromValue returns a pointer to a valid CompositeMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompositeMethodFromValue(v string) (*CompositeMethod, error) {
	ev := CompositeMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompositeMethod: valid values are %v", v, AllowedCompositeMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompositeMethod) IsValid() bool {
	for _, existing := range AllowedCompositeMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to composite_method value
func (v CompositeMethod) Ptr() *CompositeMethod {
	return &v
}

type NullableCompositeMethod struct {
	value *CompositeMethod
	isSet bool
}

func (v NullableCompositeMethod) Get() *CompositeMethod {
	return v.value
}

func (v *NullableCompositeMethod) Set(val *CompositeMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositeMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositeMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositeMethod(val *CompositeMethod) *NullableCompositeMethod {
	return &NullableCompositeMethod{value: val, isSet: true}
}

func (v NullableCompositeMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositeMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
